// Copyright 2019-2021 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: api/gadgettracermanager.proto

package gadgettracermanager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Severity int32

const (
	Severity_SeverityCritical Severity = 0
	Severity_SeverityError    Severity = 1
	Severity_SeverityWarning  Severity = 2
	Severity_SeverityInfo     Severity = 3
	Severity_SeverityDebug    Severity = 4
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SeverityCritical",
		1: "SeverityError",
		2: "SeverityWarning",
		3: "SeverityInfo",
		4: "SeverityDebug",
	}
	Severity_value = map[string]int32{
		"SeverityCritical": 0,
		"SeverityError":    1,
		"SeverityWarning":  2,
		"SeverityInfo":     3,
		"SeverityDebug":    4,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_gadgettracermanager_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_api_gadgettracermanager_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{0}
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{0}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AddContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug string `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *AddContainerResponse) Reset() {
	*x = AddContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContainerResponse) ProtoMessage() {}

func (x *AddContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContainerResponse.ProtoReflect.Descriptor instead.
func (*AddContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{1}
}

func (x *AddContainerResponse) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

type RemoveContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug string `protobuf:"bytes,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RemoveContainerResponse) Reset() {
	*x = RemoveContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContainerResponse) ProtoMessage() {}

func (x *RemoveContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContainerResponse.ProtoReflect.Descriptor instead.
func (*RemoveContainerResponse) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveContainerResponse) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

type TracerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TracerID) Reset() {
	*x = TracerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerID) ProtoMessage() {}

func (x *TracerID) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerID.ProtoReflect.Descriptor instead.
func (*TracerID) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{3}
}

func (x *TracerID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=gadgettracermanager.Severity" json:"severity,omitempty"`
	Message  string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{4}
}

func (x *ErrorMessage) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SeverityCritical
}

func (x *ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceID uint32 `protobuf:"varint,7,opt,name=traceID,proto3" json:"traceID,omitempty"`
	// Types that are assignable to Payload:
	//	*StreamData_Line
	//	*StreamData_Blob
	//	*StreamData_Error
	Payload   isStreamData_Payload `protobuf_oneof:"payload"`
	Node      string               `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp int64                `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{5}
}

func (x *StreamData) GetTraceID() uint32 {
	if x != nil {
		return x.TraceID
	}
	return 0
}

func (m *StreamData) GetPayload() isStreamData_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StreamData) GetLine() string {
	if x, ok := x.GetPayload().(*StreamData_Line); ok {
		return x.Line
	}
	return ""
}

func (x *StreamData) GetBlob() []byte {
	if x, ok := x.GetPayload().(*StreamData_Blob); ok {
		return x.Blob
	}
	return nil
}

func (x *StreamData) GetError() *ErrorMessage {
	if x, ok := x.GetPayload().(*StreamData_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StreamData) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *StreamData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type isStreamData_Payload interface {
	isStreamData_Payload()
}

type StreamData_Line struct {
	Line string `protobuf:"bytes,1,opt,name=line,proto3,oneof"`
}

type StreamData_Blob struct {
	Blob []byte `protobuf:"bytes,2,opt,name=blob,proto3,oneof"`
}

type StreamData_Error struct {
	Error *ErrorMessage `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*StreamData_Line) isStreamData_Payload() {}

func (*StreamData_Blob) isStreamData_Payload() {}

func (*StreamData_Error) isStreamData_Payload() {}

type ContainerFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string            `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName       string            `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`
	Labels        map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContainerName string            `protobuf:"bytes,6,opt,name=containerName,proto3" json:"containerName,omitempty"`
}

func (x *ContainerFilter) Reset() {
	*x = ContainerFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerFilter) ProtoMessage() {}

func (x *ContainerFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerFilter.ProtoReflect.Descriptor instead.
func (*ContainerFilter) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{6}
}

func (x *ContainerFilter) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ContainerFilter) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ContainerFilter) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainerFilter) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type TraceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gadget     string            `protobuf:"bytes,1,opt,name=gadget,proto3" json:"gadget,omitempty"`
	Nodes      []string          `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Filter     *ContainerFilter  `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Parameters map[string]string `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TraceSpec) Reset() {
	*x = TraceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSpec) ProtoMessage() {}

func (x *TraceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSpec.ProtoReflect.Descriptor instead.
func (*TraceSpec) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{7}
}

func (x *TraceSpec) GetGadget() string {
	if x != nil {
		return x.Gadget
	}
	return ""
}

func (x *TraceSpec) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *TraceSpec) GetFilter() *ContainerFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TraceSpec) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type TraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceID uint32 `protobuf:"varint,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	// Types that are assignable to TraceSpec:
	//	*TraceRequest_Cr
	//	*TraceRequest_Spec
	//	*TraceRequest_AdmissionToken
	TraceSpec isTraceRequest_TraceSpec `protobuf_oneof:"traceSpec"`
	Fanout    bool                     `protobuf:"varint,5,opt,name=fanout,proto3" json:"fanout,omitempty"`
}

func (x *TraceRequest) Reset() {
	*x = TraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRequest) ProtoMessage() {}

func (x *TraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRequest.ProtoReflect.Descriptor instead.
func (*TraceRequest) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{8}
}

func (x *TraceRequest) GetTraceID() uint32 {
	if x != nil {
		return x.TraceID
	}
	return 0
}

func (m *TraceRequest) GetTraceSpec() isTraceRequest_TraceSpec {
	if m != nil {
		return m.TraceSpec
	}
	return nil
}

func (x *TraceRequest) GetCr() []byte {
	if x, ok := x.GetTraceSpec().(*TraceRequest_Cr); ok {
		return x.Cr
	}
	return nil
}

func (x *TraceRequest) GetSpec() *TraceSpec {
	if x, ok := x.GetTraceSpec().(*TraceRequest_Spec); ok {
		return x.Spec
	}
	return nil
}

func (x *TraceRequest) GetAdmissionToken() string {
	if x, ok := x.GetTraceSpec().(*TraceRequest_AdmissionToken); ok {
		return x.AdmissionToken
	}
	return ""
}

func (x *TraceRequest) GetFanout() bool {
	if x != nil {
		return x.Fanout
	}
	return false
}

type isTraceRequest_TraceSpec interface {
	isTraceRequest_TraceSpec()
}

type TraceRequest_Cr struct {
	Cr []byte `protobuf:"bytes,2,opt,name=cr,proto3,oneof"`
}

type TraceRequest_Spec struct {
	Spec *TraceSpec `protobuf:"bytes,3,opt,name=spec,proto3,oneof"`
}

type TraceRequest_AdmissionToken struct {
	AdmissionToken string `protobuf:"bytes,4,opt,name=admissionToken,proto3,oneof"`
}

func (*TraceRequest_Cr) isTraceRequest_TraceSpec() {}

func (*TraceRequest_Spec) isTraceRequest_TraceSpec() {}

func (*TraceRequest_AdmissionToken) isTraceRequest_TraceSpec() {}

type TraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	TraceID   uint32 `protobuf:"varint,2,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Line      string `protobuf:"bytes,3,opt,name=line,proto3" json:"line,omitempty"`
	Payload   []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TraceResponse) Reset() {
	*x = TraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceResponse) ProtoMessage() {}

func (x *TraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceResponse.ProtoReflect.Descriptor instead.
func (*TraceResponse) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{9}
}

func (x *TraceResponse) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TraceResponse) GetTraceID() uint32 {
	if x != nil {
		return x.TraceID
	}
	return 0
}

func (x *TraceResponse) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *TraceResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TraceResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OwnerReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apiversion string `protobuf:"bytes,1,opt,name=apiversion,proto3" json:"apiversion,omitempty"`
	Kind       string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Uid        string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *OwnerReference) Reset() {
	*x = OwnerReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerReference) ProtoMessage() {}

func (x *OwnerReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerReference.ProtoReflect.Descriptor instead.
func (*OwnerReference) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{10}
}

func (x *OwnerReference) GetApiversion() string {
	if x != nil {
		return x.Apiversion
	}
	return ""
}

func (x *OwnerReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *OwnerReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OwnerReference) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ContainerDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid       uint32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	OciConfig string `protobuf:"bytes,3,opt,name=oci_config,json=ociConfig,proto3" json:"oci_config,omitempty"`
	// NRI and OCI hooks don't give the OCI config but give pod details
	Namespace string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Podname   string   `protobuf:"bytes,5,opt,name=podname,proto3" json:"podname,omitempty"`
	Name      string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Labels    []*Label `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ContainerDefinition) Reset() {
	*x = ContainerDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerDefinition) ProtoMessage() {}

func (x *ContainerDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerDefinition.ProtoReflect.Descriptor instead.
func (*ContainerDefinition) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{11}
}

func (x *ContainerDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerDefinition) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ContainerDefinition) GetOciConfig() string {
	if x != nil {
		return x.OciConfig
	}
	return ""
}

func (x *ContainerDefinition) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ContainerDefinition) GetPodname() string {
	if x != nil {
		return x.Podname
	}
	return ""
}

func (x *ContainerDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerDefinition) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type DumpStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpStateRequest) Reset() {
	*x = DumpStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStateRequest) ProtoMessage() {}

func (x *DumpStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStateRequest.ProtoReflect.Descriptor instead.
func (*DumpStateRequest) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{12}
}

type Dump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Dump) Reset() {
	*x = Dump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gadgettracermanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dump) ProtoMessage() {}

func (x *Dump) ProtoReflect() protoreflect.Message {
	mi := &file_api_gadgettracermanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dump.ProtoReflect.Descriptor instead.
func (*Dump) Descriptor() ([]byte, []int) {
	return file_api_gadgettracermanager_proto_rawDescGZIP(), []int{13}
}

func (x *Dump) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

var File_api_gadgettracermanager_proto protoreflect.FileDescriptor

var file_api_gadgettracermanager_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x22, 0x2f, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x22, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x63, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x64, 0x67,
	0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x02, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x63, 0x72, 0x12,
	0x34, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x6a, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xd6, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x63, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x63, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x04, 0x44, 0x75, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x6d, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x10, 0x04, 0x32, 0xbc, 0x04, 0x0a, 0x13, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1d, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1f,
	0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x29, 0x2e,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x2e,
	0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2c, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x61, 0x64,
	0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x54, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x67,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x6b, 0x74, 0x6f, 0x72, 0x2d, 0x67, 0x61,
	0x64, 0x67, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x6b, 0x74, 0x6f, 0x72, 0x2d, 0x67,
	0x61, 0x64, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_gadgettracermanager_proto_rawDescOnce sync.Once
	file_api_gadgettracermanager_proto_rawDescData = file_api_gadgettracermanager_proto_rawDesc
)

func file_api_gadgettracermanager_proto_rawDescGZIP() []byte {
	file_api_gadgettracermanager_proto_rawDescOnce.Do(func() {
		file_api_gadgettracermanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_gadgettracermanager_proto_rawDescData)
	})
	return file_api_gadgettracermanager_proto_rawDescData
}

var file_api_gadgettracermanager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_gadgettracermanager_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_gadgettracermanager_proto_goTypes = []interface{}{
	(Severity)(0),                   // 0: gadgettracermanager.Severity
	(*Label)(nil),                   // 1: gadgettracermanager.Label
	(*AddContainerResponse)(nil),    // 2: gadgettracermanager.AddContainerResponse
	(*RemoveContainerResponse)(nil), // 3: gadgettracermanager.RemoveContainerResponse
	(*TracerID)(nil),                // 4: gadgettracermanager.TracerID
	(*ErrorMessage)(nil),            // 5: gadgettracermanager.ErrorMessage
	(*StreamData)(nil),              // 6: gadgettracermanager.StreamData
	(*ContainerFilter)(nil),         // 7: gadgettracermanager.ContainerFilter
	(*TraceSpec)(nil),               // 8: gadgettracermanager.TraceSpec
	(*TraceRequest)(nil),            // 9: gadgettracermanager.TraceRequest
	(*TraceResponse)(nil),           // 10: gadgettracermanager.TraceResponse
	(*OwnerReference)(nil),          // 11: gadgettracermanager.OwnerReference
	(*ContainerDefinition)(nil),     // 12: gadgettracermanager.ContainerDefinition
	(*DumpStateRequest)(nil),        // 13: gadgettracermanager.DumpStateRequest
	(*Dump)(nil),                    // 14: gadgettracermanager.Dump
	nil,                             // 15: gadgettracermanager.ContainerFilter.LabelsEntry
	nil,                             // 16: gadgettracermanager.TraceSpec.ParametersEntry
}
var file_api_gadgettracermanager_proto_depIdxs = []int32{
	0,  // 0: gadgettracermanager.ErrorMessage.severity:type_name -> gadgettracermanager.Severity
	5,  // 1: gadgettracermanager.StreamData.error:type_name -> gadgettracermanager.ErrorMessage
	15, // 2: gadgettracermanager.ContainerFilter.labels:type_name -> gadgettracermanager.ContainerFilter.LabelsEntry
	7,  // 3: gadgettracermanager.TraceSpec.filter:type_name -> gadgettracermanager.ContainerFilter
	16, // 4: gadgettracermanager.TraceSpec.parameters:type_name -> gadgettracermanager.TraceSpec.ParametersEntry
	8,  // 5: gadgettracermanager.TraceRequest.spec:type_name -> gadgettracermanager.TraceSpec
	1,  // 6: gadgettracermanager.ContainerDefinition.labels:type_name -> gadgettracermanager.Label
	4,  // 7: gadgettracermanager.GadgetTracerManager.ReceiveStream:input_type -> gadgettracermanager.TracerID
	12, // 8: gadgettracermanager.GadgetTracerManager.AddContainer:input_type -> gadgettracermanager.ContainerDefinition
	12, // 9: gadgettracermanager.GadgetTracerManager.RemoveContainer:input_type -> gadgettracermanager.ContainerDefinition
	13, // 10: gadgettracermanager.GadgetTracerManager.DumpState:input_type -> gadgettracermanager.DumpStateRequest
	9,  // 11: gadgettracermanager.GadgetTracerManager.StreamTrace:input_type -> gadgettracermanager.TraceRequest
	9,  // 12: gadgettracermanager.GadgetTracerManager.ExecTrace:input_type -> gadgettracermanager.TraceRequest
	6,  // 13: gadgettracermanager.GadgetTracerManager.ReceiveStream:output_type -> gadgettracermanager.StreamData
	2,  // 14: gadgettracermanager.GadgetTracerManager.AddContainer:output_type -> gadgettracermanager.AddContainerResponse
	3,  // 15: gadgettracermanager.GadgetTracerManager.RemoveContainer:output_type -> gadgettracermanager.RemoveContainerResponse
	14, // 16: gadgettracermanager.GadgetTracerManager.DumpState:output_type -> gadgettracermanager.Dump
	6,  // 17: gadgettracermanager.GadgetTracerManager.StreamTrace:output_type -> gadgettracermanager.StreamData
	10, // 18: gadgettracermanager.GadgetTracerManager.ExecTrace:output_type -> gadgettracermanager.TraceResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_api_gadgettracermanager_proto_init() }
func file_api_gadgettracermanager_proto_init() {
	if File_api_gadgettracermanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_gadgettracermanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gadgettracermanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_gadgettracermanager_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*StreamData_Line)(nil),
		(*StreamData_Blob)(nil),
		(*StreamData_Error)(nil),
	}
	file_api_gadgettracermanager_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TraceRequest_Cr)(nil),
		(*TraceRequest_Spec)(nil),
		(*TraceRequest_AdmissionToken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_gadgettracermanager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_gadgettracermanager_proto_goTypes,
		DependencyIndexes: file_api_gadgettracermanager_proto_depIdxs,
		EnumInfos:         file_api_gadgettracermanager_proto_enumTypes,
		MessageInfos:      file_api_gadgettracermanager_proto_msgTypes,
	}.Build()
	File_api_gadgettracermanager_proto = out.File
	file_api_gadgettracermanager_proto_rawDesc = nil
	file_api_gadgettracermanager_proto_goTypes = nil
	file_api_gadgettracermanager_proto_depIdxs = nil
}
