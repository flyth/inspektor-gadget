// Copyright 2019-2021 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/inspektor-gadget/inspektor-gadget/pkg/gadgettracermanager";

package gadgettracermanager;

service GadgetTracerManager {
  // Methods called via kubectl-exec
  rpc ReceiveStream(TracerID) returns (stream StreamData) {}

  // Methods called by OCI Hooks
  rpc AddContainer(ContainerDefinition) returns (AddContainerResponse) {}
  rpc RemoveContainer(ContainerDefinition) returns (RemoveContainerResponse) {}

  // Methods called for debugging
  rpc DumpState(DumpStateRequest) returns (Dump) {}

  // New full-service methods
  rpc StreamTrace(TraceRequest) returns (stream StreamData) {}
  rpc ExecTrace(TraceRequest) returns (TraceResponse) {}
}

message Label {
  string key = 1;
  string value = 2;
}

message AddContainerResponse {
  string debug = 1;
}

message RemoveContainerResponse {
  string debug = 1;
}

message TracerID {
  string id = 1;
}

enum Severity {
  SeverityCritical = 0;
  SeverityError = 1;
  SeverityWarning = 2;
  SeverityInfo = 3;
  SeverityDebug = 4;
}

message ErrorMessage {
  Severity severity = 1;
  string message = 2;
}

message StreamData {
  uint32 traceID = 7;
  oneof payload {
    string line = 1;
    bytes blob = 2;
    ErrorMessage error = 3;
  }
  string node = 4;
  int64 timestamp = 6;
}

message ContainerFilter {
  string namespace = 3;
  string podName = 4;
  map<string, string> labels = 5;
  string containerName = 6;
}

message TraceSpec {
  string gadget = 1;
  repeated string nodes = 2;
  ContainerFilter filter = 3;
  map<string, string> parameters = 4;
}

message TraceRequest {
  uint32 traceID = 1;
  oneof traceSpec {
    bytes cr = 2;
    TraceSpec spec = 3;
    string admissionToken = 4;
  }
  bool fanout = 5;
}

message TraceResponse {
  uint32 type = 1;
  uint32 traceID = 2;
  string line = 3;
  bytes payload = 4;
  int64 timestamp = 5;
}

message OwnerReference {
  string apiversion = 1;
  string kind = 2;
  string name = 3;
  string uid = 4;
}

message ContainerDefinition {
  string id = 1;
  uint32 pid = 2;
  string oci_config = 3;

  // NRI and OCI hooks don't give the OCI config but give pod details
  string namespace = 4;
  string podname = 5;
  string name = 6;
  repeated Label labels = 7;
}

message DumpStateRequest {
}

message Dump {
  string state = 1;
}
