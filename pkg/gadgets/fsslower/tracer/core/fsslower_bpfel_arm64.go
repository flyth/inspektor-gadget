// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64
// +build arm64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadFsslower returns the embedded CollectionSpec for fsslower.
func loadFsslower() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FsslowerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load fsslower: %w", err)
	}

	return spec, err
}

// loadFsslowerObjects loads fsslower and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *fsslowerObjects
//     *fsslowerPrograms
//     *fsslowerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFsslowerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFsslower()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// fsslowerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fsslowerSpecs struct {
	fsslowerProgramSpecs
	fsslowerMapSpecs
}

// fsslowerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fsslowerProgramSpecs struct {
	FileOpenEntry  *ebpf.ProgramSpec `ebpf:"file_open_entry"`
	FileOpenExit   *ebpf.ProgramSpec `ebpf:"file_open_exit"`
	FileReadEntry  *ebpf.ProgramSpec `ebpf:"file_read_entry"`
	FileReadExit   *ebpf.ProgramSpec `ebpf:"file_read_exit"`
	FileSyncEntry  *ebpf.ProgramSpec `ebpf:"file_sync_entry"`
	FileSyncExit   *ebpf.ProgramSpec `ebpf:"file_sync_exit"`
	FileWriteEntry *ebpf.ProgramSpec `ebpf:"file_write_entry"`
	FileWriteExit  *ebpf.ProgramSpec `ebpf:"file_write_exit"`
}

// fsslowerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fsslowerMapSpecs struct {
	Events     *ebpf.MapSpec `ebpf:"events"`
	MountNsSet *ebpf.MapSpec `ebpf:"mount_ns_set"`
	Starts     *ebpf.MapSpec `ebpf:"starts"`
}

// fsslowerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFsslowerObjects or ebpf.CollectionSpec.LoadAndAssign.
type fsslowerObjects struct {
	fsslowerPrograms
	fsslowerMaps
}

func (o *fsslowerObjects) Close() error {
	return _FsslowerClose(
		&o.fsslowerPrograms,
		&o.fsslowerMaps,
	)
}

// fsslowerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFsslowerObjects or ebpf.CollectionSpec.LoadAndAssign.
type fsslowerMaps struct {
	Events     *ebpf.Map `ebpf:"events"`
	MountNsSet *ebpf.Map `ebpf:"mount_ns_set"`
	Starts     *ebpf.Map `ebpf:"starts"`
}

func (m *fsslowerMaps) Close() error {
	return _FsslowerClose(
		m.Events,
		m.MountNsSet,
		m.Starts,
	)
}

// fsslowerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFsslowerObjects or ebpf.CollectionSpec.LoadAndAssign.
type fsslowerPrograms struct {
	FileOpenEntry  *ebpf.Program `ebpf:"file_open_entry"`
	FileOpenExit   *ebpf.Program `ebpf:"file_open_exit"`
	FileReadEntry  *ebpf.Program `ebpf:"file_read_entry"`
	FileReadExit   *ebpf.Program `ebpf:"file_read_exit"`
	FileSyncEntry  *ebpf.Program `ebpf:"file_sync_entry"`
	FileSyncExit   *ebpf.Program `ebpf:"file_sync_exit"`
	FileWriteEntry *ebpf.Program `ebpf:"file_write_entry"`
	FileWriteExit  *ebpf.Program `ebpf:"file_write_exit"`
}

func (p *fsslowerPrograms) Close() error {
	return _FsslowerClose(
		p.FileOpenEntry,
		p.FileOpenExit,
		p.FileReadEntry,
		p.FileReadExit,
		p.FileSyncEntry,
		p.FileSyncExit,
		p.FileWriteEntry,
		p.FileWriteExit,
	)
}

func _FsslowerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed fsslower_bpfel_arm64.o
var _FsslowerBytes []byte
