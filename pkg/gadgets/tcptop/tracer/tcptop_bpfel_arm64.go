// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64
// +build arm64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTcptop returns the embedded CollectionSpec for tcptop.
func loadTcptop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcptopBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcptop: %w", err)
	}

	return spec, err
}

// loadTcptopObjects loads tcptop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *tcptopObjects
//     *tcptopPrograms
//     *tcptopMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcptopObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcptop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcptopSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcptopSpecs struct {
	tcptopProgramSpecs
	tcptopMapSpecs
}

// tcptopSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcptopProgramSpecs struct {
	TcpCleanupRbuf *ebpf.ProgramSpec `ebpf:"tcp_cleanup_rbuf"`
	TcpSendmsg     *ebpf.ProgramSpec `ebpf:"tcp_sendmsg"`
}

// tcptopMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcptopMapSpecs struct {
	IpMap      *ebpf.MapSpec `ebpf:"ip_map"`
	MountNsSet *ebpf.MapSpec `ebpf:"mount_ns_set"`
}

// tcptopObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcptopObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcptopObjects struct {
	tcptopPrograms
	tcptopMaps
}

func (o *tcptopObjects) Close() error {
	return _TcptopClose(
		&o.tcptopPrograms,
		&o.tcptopMaps,
	)
}

// tcptopMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcptopObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcptopMaps struct {
	IpMap      *ebpf.Map `ebpf:"ip_map"`
	MountNsSet *ebpf.Map `ebpf:"mount_ns_set"`
}

func (m *tcptopMaps) Close() error {
	return _TcptopClose(
		m.IpMap,
		m.MountNsSet,
	)
}

// tcptopPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcptopObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcptopPrograms struct {
	TcpCleanupRbuf *ebpf.Program `ebpf:"tcp_cleanup_rbuf"`
	TcpSendmsg     *ebpf.Program `ebpf:"tcp_sendmsg"`
}

func (p *tcptopPrograms) Close() error {
	return _TcptopClose(
		p.TcpCleanupRbuf,
		p.TcpSendmsg,
	)
}

func _TcptopClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed tcptop_bpfel_arm64.o
var _TcptopBytes []byte
