// Copyright 2019-2022 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package trace

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"
	"strings"

	"github.com/kinvolk/inspektor-gadget/cmd/kubectl-gadget/utils"
	"github.com/kinvolk/inspektor-gadget/pkg/gadgets/bindsnoop/types"
	eventtypes "github.com/kinvolk/inspektor-gadget/pkg/types"
	"github.com/spf13/cobra"
)

func newBindCmd() *cobra.Command {
	columnsWidth := map[string]int{
		"node":      -16,
		"namespace": -16,
		"pod":       -16,
		"container": -16,
		"pid":       -7,
		"comm":      -16,
		"proto":     -6,
		"addr":      -16,
		"port":      -7,
		"opts":      -7,
		"if":        7,
	}

	defaultColumns := []string{
		"node",
		"namespace",
		"pod",
		"container",
		"pid",
		"comm",
		"proto",
		"addr",
		"port",
		"opts",
		"if",
	}

	var (
		targetPid    uint
		targetPorts  []uint
		ignoreErrors bool
	)

	cmd := &cobra.Command{
		Use:   "bind",
		Short: "Trace the kernel functions performing socket binding",
		RunE: func(cmd *cobra.Command, args []string) error {
			portsStringSlice := []string{}
			for _, port := range targetPorts {
				portsStringSlice = append(portsStringSlice, strconv.FormatUint(uint64(port), 10))
			}

			config := &utils.TraceConfig{
				GadgetName:       "bindsnoop",
				Operation:        "start",
				TraceOutputMode:  "Stream",
				TraceOutputState: "Started",
				CommonFlags:      &commonFlags,
				Parameters: map[string]string{
					"pid":           strconv.FormatUint(uint64(targetPid), 10),
					"ports":         strings.Join(portsStringSlice, ","),
					"ignore_errors": strconv.FormatBool(ignoreErrors),
				},
			}

			// print header
			var requestedColumns []string
			switch commonFlags.OutputMode {
			case utils.OutputModeJSON:
				// Nothing to print
			case utils.OutputModeColumns:
				requestedColumns = defaultColumns
			case utils.OutputModeCustomColumns:
				requestedColumns = commonFlags.CustomColumns
			}
			printColumnsHeader(columnsWidth, requestedColumns)

			transformEvent := func(line string) string {
				var e types.Event

				if err := json.Unmarshal([]byte(line), &e); err != nil {
					fmt.Fprintf(os.Stderr, "Error: %s", utils.WrapInErrUnmarshalOutput(err, line))
					return ""
				}

				if e.Type != eventtypes.NORMAL {
					utils.ManageSpecialEvent(e.Event, commonFlags.Verbose)
					return ""
				}

				return bindsnoopTransformEvent(e, columnsWidth, requestedColumns)
			}

			if err := utils.RunTraceAndPrintStream(config, transformEvent); err != nil {
				return utils.WrapInErrRunGadget(err)
			}

			return nil
		},
	}

	cmd.PersistentFlags().UintVarP(
		&targetPid,
		"pid",
		"",
		0,
		"Show only bind events generated by this particular PID",
	)
	cmd.PersistentFlags().UintSliceVarP(
		&targetPorts,
		"ports",
		"P",
		[]uint{},
		"Trace only bind events involving these ports",
	)
	cmd.PersistentFlags().BoolVarP(
		&ignoreErrors,
		"ignore-errors",
		"i",
		true,
		"Show only events where the bind succeeded",
	)

	utils.AddCommonFlags(cmd, &commonFlags)

	return cmd
}

// tcpconnectTransformEvent is called to transform an event to columns format.
func bindsnoopTransformEvent(event types.Event, columnsWidth map[string]int, requestedColumns []string) string {
	var sb strings.Builder

	for _, col := range requestedColumns {
		switch col {
		case "node":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Node))
		case "namespace":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Namespace))
		case "pod":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Pod))
		case "container":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Container))
		case "pid":
			sb.WriteString(fmt.Sprintf("%*d", columnsWidth[col], event.Pid))
		case "comm":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Comm))
		case "proto":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Protocol))
		case "addr":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Addr))
		case "port":
			sb.WriteString(fmt.Sprintf("%*d", columnsWidth[col], event.Port))
		case "opts":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Options))
		case "if":
			sb.WriteString(fmt.Sprintf("%*s", columnsWidth[col], event.Interface))
		}

		// Needed when field is larger than the predefined columnsWidth.
		sb.WriteRune(' ')
	}

	return sb.String()
}
